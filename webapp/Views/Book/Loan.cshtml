@model webapp.ViewModels.Book.LoanViewModel;
@{
  ViewData["Title"] = "Livros";
  Layout = "~/Views/Shared/_LayoutPrincipal.cshtml";
}

<div class="container-fluid">
  <div class="row">
    <div class="col-12">
      <h3 class="text-center">Área de Empréstimos</h3>

      <div class="row" id="divLoader">
        <div class="col-md-12 text-center">
          <h1>Aguarde, carregando...</h1>
        </div>
      </div>

      <div style="display: none; margin-bottom: 4% !important;" id="divTableLoans">
        <table id="tblLoans" class="table table-striped table-bordered dt-responsive nowrap mt-4"
          style="border-collapse: collapse; border-spacing: 0; width: 100%;">
          <thead>
            <tr style="color: rgb(10, 17, 63);">
              <th class="border-top-0">Id</th>
              <th class="border-top-0">Título</th>
              <th class="border-top-0">Autor</th>
              <th class="border-top-0">ISBN</th>
              <th class="border-top-0">Páginas</th>
              <th class="border-top-0">Edição</th>
              <th class="border-top-0">Emprestado?</th>
              <th class="border-top-0">Ações</th>
            </tr>
          </thead>
          <tbody>
            @if (Model.Books != null)
            {
              @foreach (var book in Model.Books)
              {
                <tr>
                  <td>
                    @Html.DisplayFor(modelItem => book.Id)
                  </td>
                  <td>
                    @Html.DisplayFor(modelItem => book.Title)
                  </td>
                  <td>
                    @Html.DisplayFor(modelItem => book.Author)
                  </td>
                  <td>
                    @Html.DisplayFor(modelItem => book.ISBN)
                  </td>
                  <td>
                    @Html.DisplayFor(modelItem => book.Pages)
                  </td>
                  <td>
                    @Html.DisplayFor(modelItem => book.Edition)
                  </td>
                  <td>
                    @if (book.LoanStatus == "Disponível")
                    {
                      <span style="color: #218838; font-weight: 500;">@Html.DisplayFor(modelItem => book.LoanStatus)</span>
                    }
                    else
                    {
                      <span style="color: red; font-weight: 500;">@Html.DisplayFor(modelItem => book.LoanStatus)</span>
                    }
                  </td>
                  <td class="text-center">
                    @if (book.LoanStatus == "Disponível")
                    {
                      <button data-bid="@book.Id" data-book-title="@book.Title" type="button"
                  class="btn btn-success btnBorrowBook">Emprestar</button>
                      <button type="button" class="btn btn-primary" style="cursor: not-allowed" disabled>Devolver</button>
                    }
                    else
                    {
                      <button type="button" class="btn btn-success" style="cursor: not-allowed" disabled>Emprestar</button>
                      <button data-loan-id="@book.LoanId" data-loan-status="@book.LoanStatus" data-book-title="@book.Title"
                  type="button" class="btn btn-primary btnReturnBook">Devolver</button>
                    }
                  </td>
                </tr>
              }
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

@await Html.PartialAsync("~/Views/Book/_LoadAvailableStudentsForTheLoan.cshtml")

@section Scripts{
<script type="text/javascript">
  $(document).ready(function () {
    var buttonCommon = {
      exportOptions: {
        format: {
          body: function (data, column, row, node) {
            return (column >= 29 && column <= 30) ? data.replace(/[.]/g, '').replace(',', '.') : data;
          }
        }
      }
    };

    var dataTable = $("#tblLoans").DataTable({
      "lengthMenu": [[15, 25, 50, -1], [15, 25, 50, "Todos"]],
      "pageLength": 15,
      'columnDefs': [
        { responsivePriority: 1, targets: 0 },
        { responsivePriority: 2, targets: 1 },
        { responsivePriority: 3, targets: 6 },
        { responsivePriority: 4, targets: 7 }
      ],
      language: {
        "sProcessing": "A processar...",
        "sDecimal": ",",
        "sThousands": ".",
        "sLengthMenu": "Mostrar _MENU_ registros",
        "sZeroRecords": "Não foram encontrados resultados",
        "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
        "sInfoEmpty": "Mostrando de 0 até 0 de 0 registros",
        "sInfoFiltered": "(filtrado de _MAX_ registos no total)",
        "sInfoPostFix": "",
        "sSearch": "Procurar:",
        "sUrl": "",
        "oPaginate": {
          "sFirst": "Primeiro",
          "sPrevious": "Anterior",
          "sNext": "Seguinte",
          "sLast": "Último"
        },
        "url": "//cdn.datatables.net/plug-ins/1.10.12/i18n/Portuguese-Brasil.json",
        "sCopy": "Copiar"
      },
      dom: 'Blfrtip',
      buttons: [
        { extend: 'copy', text: 'Copiar' },
        'excel', /* 'pdf', */ 'csv', 'print'
      ],
      "order": [[0, "asc"]],
      "scrollX": true
    }).on('init', function (e, settings, data) {
      $("#divTableLoans").show();
      $("#divLoader").hide();
    });

    $('#tblLoans').on('length.dt', function (e, settings, len) {
      dataTable.columns.adjust().draw();
    });

    $("#tblAvailableStudentsForTheLoan").DataTable({
      "lengthMenu": [[7], [7]],
      "pageLength": 7,
      language: {
        "sProcessing": "A processar...",
        "sLengthMenu": "Mostrar _MENU_ registros",
        "sZeroRecords": "Não foram encontrados resultados",
        "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
        "sInfoEmpty": "Mostrando de 0 até 0 de 0 registros",
        "sInfoFiltered": "(filtrado de _MAX_ registos no total)",
        "sSearch": "Procurar:",
        "oPaginate": {
          "sFirst": "Primeiro",
          "sPrevious": "Anterior",
          "sNext": "Seguinte",
          "sLast": "Último"
        },
        "url": "//cdn.datatables.net/plug-ins/1.10.12/i18n/Portuguese-Brasil.json",
      },
      "order": [[0, "asc"]],
      "scrollX": true
    });

    $('.btnBorrowBook').click(function () {
      var bidCurrentLoan = $(this).data('bid');
      var bookTitleCurrentLoan = $(this).data('book-title');
      $('#tblAvailableStudentsForTheLoan').data('bid-current-loan', bidCurrentLoan);
      $('#tblAvailableStudentsForTheLoan').data('book-title-current-loan', bookTitleCurrentLoan);
      $(".modal-load-available-students-loan-lg").modal("show");
    });

    $('.rowAvailableStudentsForTheLoan').click(function () {
      $('#tblAvailableStudentsForTheLoan tbody tr').css('background-color', '#fff');
      var sidCurrentLoan = $(this).data('sid');
      var studentNameCurrentLoan = $(this).data('student-name');
      $('#tblAvailableStudentsForTheLoan').data('sid-current-loan', sidCurrentLoan);
      $('#tblAvailableStudentsForTheLoan').data('student-name-current-loan', studentNameCurrentLoan);
      $(this).css('background-color', '#218838');
      $('#btnConfirmLoan').prop('disabled', false);
    });

    $('#btnConfirmLoan').click(function () {
      var bidCurrentLoan = $('#tblAvailableStudentsForTheLoan').data('bid-current-loan');
      var sidCurrentLoan = $('#tblAvailableStudentsForTheLoan').data('sid-current-loan');
      var bookTitleCurrentLoan = $('#tblAvailableStudentsForTheLoan').data('book-title-current-loan');
      var studentNameCurrentLoan = $('#tblAvailableStudentsForTheLoan').data('student-name-current-loan');

      Swal.fire({
        html: `Você confirma o empréstimo do livro <strong>${bookTitleCurrentLoan}</strong> para o(a) aluno(a) <strong>${studentNameCurrentLoan}?</strong>`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sim',
        cancelButtonText: 'Não'
      }).then((result) => {
        if (result.isConfirmed) {
          $.ajax({
            url: "@Url.Action("ToLoan", "Book")?studentId=" + sidCurrentLoan + "&bookId=" + bidCurrentLoan,
            type: 'POST',
            success: function (result) {
              $(".modal-load-available-students-loan-lg").modal("toggle");
              Swal.fire({
                title: 'Sucesso!',
                icon: 'success',
                text: 'Empréstimo salvo com sucesso!',
                allowOutsideClick: false,
                confirmButtonText: 'OK',
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.reload();
                }
              });
            },
            error: function (err) {
              Swal.fire({ icon: 'error', title: 'Erro!', text: err.responseJSON.message, });
            }
          });
        }
      })
    });

    $('.btnReturnBook').click(function () {
      var loanIdCurrentReturn = $(this).data('loan-id');
      var studentLoginCurrentReturn = $(this).data('loan-status');
      var bookTitleCurrentReturn = $(this).data('book-title');

      Swal.fire({
        html: `Você confirma a devolução do livro <strong>${bookTitleCurrentReturn}</strong> pelo(a) aluno(a) <strong>${studentLoginCurrentReturn}?</strong>`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sim',
        cancelButtonText: 'Não'
      }).then((result) => {
        if (result.isConfirmed) {
          $.ajax({
            url: "@Url.Action("RegisterBookReturn", "Book")?loanId=" + loanIdCurrentReturn,
            type: 'POST',
            success: function (result) {
              Swal.fire({
                title: 'Sucesso!',
                icon: 'success',
                text: 'Devolução registrada com sucesso!',
                allowOutsideClick: false,
                confirmButtonText: 'OK',
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.reload();
                }
              });
            },
            error: function (err) {
              Swal.fire({ icon: 'error', title: 'Erro!', text: err.responseJSON.message, });
            }
          });
        }
      })
    });
  });
</script>
}